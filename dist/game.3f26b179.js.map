{"version":3,"sources":["javascript/input.js","javascript/cube.js","javascript/obsticales.js","javascript/grid.js","javascript/food.js","javascript/score.js","javascript/game.js"],"names":["inputDirection","x","y","lastInputDirection","window","addEventListener","e","key","getInputDirection","snakeBody","updateSnake","i","length","colors","setColor","input","map","color","document","getElementById","style","onclick","drawSnake","gameBoard","snakeElement","createElement","gridRowStart","gridColumnStart","backgroundColor","classList","add","id","appendChild","onSnake","position","equalPositions","position1","position2","getSnakeHead","obsticalePositions","checkObsticale","isOnObsticale","obsticalePosition","drawObsticale","obsticaleElement","GRID_SIZE","randomGridPosition","Math","floor","random","outSideGrid","newFoodPosition","getRandomFoodPosition","foodPosition","time","score","interval","myTimer","updateFood","clearInterval","setInterval","drawFood","foodElement","scoreBoard","highScoreBoard","highScore","localStorage","getItem","setItem","displayScore","innerHTML","toString","lastRenderTime","gameOver","gameSpeed","setSpeed","speed","difficulty","main","currentTime","confirm","location","requestAnimationFrame","secondsSinceLastRender","update","draw","checkDeath","changeBoxGlow","boxShadow"],"mappings":";;;;;;AGAA,AHAA,IGAM6C,AHAF7C,SGAW,GAAG,EAAlB,AHAkB,EGElB,CHFqB;ACArB,AGAA,AEAA,ANAuBC,AEAvB,AGAA,ELAuBA,CAAC,EAAE,CAAL;AGId,AHJsBC,EAAAA,CAAC,CGIjB4C,CHJmB,iBGID,GAAG,SAArBA,kBAAqB,GAAM;ACHxC,AEAA,AHII,AHLiB,AEErB,AGAA,CLFA,GKEMiB,KFGK,KEHK,GAAG7C,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAnB;AFIQlB,AHLR,AEGO,AGDP,IFGQA,AHLJE,AEGOoC,AGDLyB,CFGG,EAAEjB,IAAI,CAACC,KAAL,CAAWD,AEHF,GAAG7B,CFGG,AHLJ,AEGO,CCEF+B,EHLF,AEGO,CAC5B,GCCkB,AEHS,CAAC9B,IFGM0B,SAA3B,CEHY,CAAwB,EFGI,CADxC,SEFY,CAAvB;ADDA,AEAA,AHKQ3C,AHNmBD,AEIrBA,AGAN,ELJ2BA,AEIrBA,CFJsB,AEIrB,CCECC,AEFF+D,CFEG,AHNqB,AEIrB,CFJgB,CGMdlB,ADFP,ICEW,CAACC,CEFD,GAAGkB,CFEP,CAAWnB,IAAI,CAACE,KEFG,CFER,AEFSkB,KFEOtB,EEFpB,CAAqB,MFE5B,IAAwC,EEFjC,CAAlB;AFAW,AHJsB3C,AEIpBA,EFJoBA,AEIpBA,CCAT,AHJ8B,AEIpB,EFJsB,AEIpB;AEDhB,AEDA,AHMC,AHRwB,AEIrB,AGEJ,CFHO,AHHP,AEGgC,ECOhC,ADLI,CGCA,CAAC+D,SAAL,EAAgB;ADDhB,AJHA7D,AEGMH,AGEFiE,EHFEjE,AGEFiE,CHFG,CEAHf,CFAK,CFHH,CAAC9C,AEGH,OGEY,CAAC+D,IDFE,GAAG,ACElB,CLLJ,AKKyB,CLLD,SAAxB,EAAmC,AKK/B,EAAmC,CAAnC,OLL+B9D,CAAC,EAAI;ACDxC,AGIwBL,AEFxB,ANAI,AEESC,AGGZ,EDHuBD,AFAXC,CEAY,AFAX,EEAa,AFAX,EEAM,GJFVI,CAAC,CAACC,GAAV;ACAJ,AGE+BL,AJDvB,AECJ,CAF4B,CEEDA,CAAC,AFC5B,EED8B,IJDrB,SAAL;ACGR,AGFsB,AEAtB,ANAY,AECND,AGIC,CDLP,CFCMA,CAAC,CIDHuE,ADKSH,CHJJ,EAAL,GFDYlE,MKKS,ECLP,CDKU,ECLP,CAArB,MNAkC,AKKrBkE,CLLsBnE,CAAnB,KAAyB,CAA7B,EAAgC,EKKhB,GAAM;AJDlC,AKHA,AHMO,AHNKF,AEACE,AGKT6D,EHLS7D,AGKT6D,CHLU,CDGRtD,AKHFgE,AHMSvB,CDNG,CFAJlD,MMAA,ADKE,CJFC,AIEAsE,ECLA,AHMS,CFHN,EEGS,EGN3B,ANA0B,EKKtB,CLLyB,EKKFf,EFCdL,UEDoBqB,CFCN,CAACrC,MEDD,EFCA,AEDvB,EFCqC;AFHrBjC,AGFpB,AEAA,AHMI,AHP2BA,AEA3B,AGMA+D,CHT4B,CDMZ/D,AIGhB+D,CJHiB,ACFjB,CEAEZ,AEAA7B,CLEiB,EAAL,CDHatB,CGQvBiC,AHRwB,EAAE,CAAL,CMCd,GAAGhB,ADKA,CFEF,AEFGoD,CFEFrE,CAAT,GAAa,CAAb,CGPkB,CFAC,AEAAkB,CDKvB,CFEsBe,CCPI,CCKC+B,MFEG,CAAChE,CCP7BmD,ADOoB,CEFc,CCLtB,ADKuBmB,CCLC,AHOH1B,OEFR,EFEvB,AEFJ,GCLc,CAAlB,AHQQX,KCRsB,GAAM,ADQpB,CAAChC,CAAT,GAAa,CADb,IACkBgC,QAAQ,CAAChC,CAAT,GAAa2C,SAFnC;AFJuB3C,AGDvB,AEAJ,AHSC,AHXoCA,AEC/BD,CCKC,CFHoBC,ACFrBD,CDEsB,ACFrB,CICHyE,CLC0B,ACFrB,EAAL,CFDiCxE,CIE1B,AJF2B,EAAE,CAAC,CME5B,GAAG,EAAhB,EAEA,QFFmBiD,eAAR,CAAP,EAAiC;AHCnB,AGAVA,AJHqB,AEChBjD,AGOT,CJLJ,CCFaA,CDIb,ACJc,CEENiD,CFFQ,CGORI,CLRI,YIGW,CCKPU,EDLU,OCKtB,EAAuB,sBDLnB;AACH,AEEL,ANLY,AEAR,AGQIC,CHZwB,EAK5B,CIIES,ADGET,QCHM,GAAG,CDGG,CAACE,OCHfO,ADGE,CAAqB,OCHZ,CAACC,IDGV,CCHS,CDG0BrB,CCHlBsB,UAAR,ADGT,ECHgC;ALCjC,AKAHH,AJLEzE,AGQD,ECHDyE,AJLEzE,CAAC,CDKMS,CCLJ,EAAL,IIKS,GAAGkE,CLAQ,GAAG,CKAvB,QLASlE,WAAc,GAAM;AAC7B,AGHA,AEGAQ,ANNI,AEAKhB,AGSZ,CAPM,CCIHgB,AJNShB,CAAC,EAAE,CDMNF,GGHCmD,AJHE,CMMD,CAAChC,SLAW,ADNhB,GCMmB,CGHvB,CEGA,CAAwB0D,UAAU,CAAC,CAAD,CAAlC,EAAuCzD,KAAvC,CAA6CH,KAA7C,ELAA,CKAqD,OAArD;AFFH,AEGGC,ANNQ,AEDR,CEDJ,AFJgC,CIY5BA,AJZG,CEWP,CFHA,MIIY,ANNIf,CMMHgB,cAAT,CAAwB0D,ENNM,CAAC3E,CAAnB,KAAyB,CMMH,ANN1B,CMM2B,CAAD,ANNM,CMMxC,EAAuCkB,KAAvC,CAA6CH,KAA7C,GAAqD,OAArD;ALAA,AKCAC,ANNQlB,EMMRkB,INNQlB,CCKH,GKCG,CLDCW,AKCAQ,CLDC,GAAGV,KDLS,GAAG,CCKH,CAACG,AKCvB,CAAwBiE,KLDX,GAAmB,CAAhC,CKCkC,CLDClE,AKCA,CLDC,AKCF,CAAlC,EAAuCS,CLDC,CAAxC,EAA2CT,CAAC,AKC5C,CAA6CM,CLD7C,EAAgD,EKChD,GAAqD,KAArD;ALAIR,AKCP,ANP8BR,CME/B,GLIQQ,IDNuBR,CAAC,EAAE,CAAL,CCMZ,CAACU,CAAC,GAAG,CAAL,CAAT,qBAAwBF,SAAS,CAACE,CAAD,CAAjC;AACH,AGDL,AJNqCT,IIMjCmD,IJNiCnD,CAAC,EAAE,KIMxB,GAAGkD,qBAAqB,EAAxC;AACO,AEEPlC,ANT6B,AEGtB,IEIIoC,AFJEd,GFHD,CIOG,AEEP,CAACrB,EFFS,CAAX,MFJoB,GAAG,EIM9B,CAAwB,MAAxB,AJNaqB,EIMmBnB,OAAhC,GAA0C,EJNZ,GAAM;ADMhCZ,AKAsC,ANR9B,AEGR,EDKAA,ICLIgC,GIKwCkC,ELAnC,CAAC1E,CAAV,IAAeD,AKAqC,CAAC,CJLpC,CIKmC,EAAK,AJLrC,CIKsC,IJL1D,EIKyD,ELA5B,AKAqC,CLApCC,CAA9B,MKAyD,EAAmB,MAAnB,CAAL,CAAd;ALCtCQ,AGFG,AECmC,AJHtC8B,CIGJ,CLCI9B,ACJA8B,EEEOgB,KAAK,EHEH,CAACrD,AGFK,CHEf,AGFG,IHEYF,GCJG,CAACgB,GAAnB,CAAuB,MDIM,CAACd,CAA9B,ECJuBwC,iBAAiB,EAAI;ADK/C,ADTO,AEKA,CDJD,EAUP,KCNY,CFLC,WAAL,OEKYA,iBAAR,CAAJ,EAAgC,OAAOD,aAAa,GAAG,IAAvB;AEExC,AECAvB,ANPY,AEMJ,IEAJsC,IECI,CAACrC,CNPOhB,CEMD,CEAH,GAAG,CFAP,GEAR,EAEA,EEDA,CAAwB,INPU,CAACF,CAAnB,EMOhB,EAAkCoB,CNPO,CAA7B,EAAgC,GMO5C,GAA4C;AAAA,ANNhCrB,AEMP,GAJD,GFFQA,GMMsC2E,QAAQ,CAAC,EAAD,ANNhC,EMMqC,CAAC,ANNnC,QMMkC,EAAW,MAAX,EAAmB,MAAnB,CAAL,CAAd;AFIrC,AEJqC,ANNb1E,AEQ3B,CIFJ,GFIawD,IJVkBxD,CAAC,AEQrBwC,EEES,AJVc,CAAC,CAAN,CIUN,QFFnB,CEESgB,OAAU,GAAM;AHC7B,AGAI,AJXkCvD,AESrC,CAVM,EAYP,CDAMW,IDXgCX,CAAC,CCW3B,CDX6B,ECW1B,CACX,CAAC,EGDDoD,GHCA,CGDI,CHCI,EGDDA,IAAI,CHCX,CADW,CGAG,CHEd,AGFA,CHEC,KAAD,EAAQ,YAAR,CAFW,EAGX,CAAC,KAAD,EAAQ,WAAR,CAHW,EAIX,CAAC,KAAD,EAAQ,KAAR,CAJW,EAKX,CAAC,KAAD,EAAQ,OAAR,CALW,EAMX,CAAC,KAAD,EAAQ,QAAR,CANW,CAAf;AGCI,AELJpC,ANP6B,OAAjB,CMOJ,CAACC,cAAT,CAAwB,MAAxB,EAAgCE,OAAhC,GAA0C;ALa1C,AGPC,AENyC,ANN9B,CISL,EAKP,CHKMP,KKb0C6D,GLalC,GAAG,EKbuC,CAAC,EAAD,EAAK,CAAC,CLaxD7D,KKbuD,EAAS,CLarD,CAACC,IKb2C,CLa5C,CKb6D,CLalD,OKbiC,CAAL,CAAd;ALctCF,AKdsC,CAA1C,CLcIA,CKXJ,KLWU,CAACG,GAAP,CAAW,UAAAC,KAAK,EAAI;AAChB,ADpBA,QCoBIF,CDpBC,ICoBI,KAAKE,GDpBd,ECoBmB,CAAC,CAAD,CAAnB,EAAwB;AACpBA,ADpBA,AEUL,IAAM0B,EDUD1B,IDpBId,CCoBC,CAAC,CAAD,CAAL,GAAW,ACVG,GAAG,CDUjB,ODpBsB,CAACF,AEUtB0C,CFVG,KAAyB,CAA7B,EAAgC,IEUf,CAACpB,SAAD,EAAe;ADWhCL,AKXZ,ANTYlB,AEURuC,EAAAA,EIDEuC,ELWM5D,ADpBAlB,EMSF,GAAG,GLWO,CAACmB,KKXf2D,ANToB,AEUJ,CAAC9D,EFVM,CMShB,AJCT,CIDU+D,AJCa,IDUf,CAAwB9D,KAAK,ACVdiB,CDUe,AKX7B,CLW4B,CAA7B,AKXkB,ELWgBd,GCVX,EDUvB,ACV2B,CDUaH,KAAxC,GAAgDA,KAAK,CAAC,CAAD,CAArD;AACH,AGRF,AEHH,ANV2BhB,AEWvB,IEEKyD,CHKL,CKRAe,ENVuBxE,AEWjB2C,CFXkB,ECsBnB,ADtBqB,CAAL,EIaN,AEHnB,EAAc,CFGQ,OFFI,EEEjBc,CFFoBxC,QAAQ,CEEf,AFFgBO,GEEV,UFFC,CAAuB,KAAvB,CAAzB;ADYIR,AGTR,AEHI,ANX6Bf,AEY7B0C,IAAAA,EDWI3B,AGTJ,EEHI+D,ANXyB9E,CAAC,ECuBrB,ADvBuB,CCuBtB,CAAD,CAAL,CKZO,ELYI,GCXC,CAACkB,CDWb,GGTIiC,CFFR,CAAuB3B,UEEvB,CAAJ,CFFI,CEEuB,EFFeQ,QAAQ,CAAChC,CAA/C,KID8CqD,WAAnC,+CAAX,EAAiG;ALa7FrC,AGTJmC,AEHIjD,ANZiB,AEarBwC,IEEAS,AFFAT,EDWI1B,AKZAd,CNZA,KMYM,CAAC6E,CLYC,CAAC9D,CGTD,GAAGiC,CFFC,CIDZ,AJCahC,GIDK,EJCtB,CIDI,AJCmBO,EDWnB,CAAwBV,KAAK,CAAC,CAAD,CAA7B,EAAkCG,AGTF,EAApC,AFFA,GDWI,ACXqCc,CDWGjB,KAAxC,ECX6C,CDWG,ACXFhB,CAAlD,MDWI;AACH,AGTDsC,AEHC,ANZG,AEaJK,IAAAA,gBAAgB,CAACf,SAAjB,CAA2BC,GAA3B,CEEmB,AFFY,CEE/B,IAAwB,MFFxB,yBEEA;AHUH,AGTGS,AJhCJ,AE8BIhB,GDEJ,CCFIA,SAAS,CAACS,WAAV,CAAsBY,SEEH,CAAnB,IAAwB,EFFxB,6BEEA;AHUP,AGTOL,AEJA,ANXP,AEaI,CDAL,ADhCA,EE0BI,gCEQuB,CAAnB,IAAwB,+BAAxB;AACAA,AEJH,AJEJ,CARM,kCEUoB,CAAnB,IAAwB,+BAAxB;AHURrB,AGTQqB,AJfD,IAAM/B,ICwBL,CAACW,YDxBqB,ECwB9B,CAAwB,ADxBS,OCwBjC,EAAiCE,ADxBpBb,EIec,CAAnB,IHSR,AGTgC,GHSW,ODxBV,GAAM,kBIe/B;AHSmC,AGRnC,AEJJJ,ANXAD,EMWAC,ANXAD,MMWM,CLYuCW,AKZtCoE,QLY8C,CAAC,EGRlD3B,AJfc,GAAGvD,ECuBgC,AGR5C,CHQ8B,EGRnCuD,EEJJ,CAA6BuB,EFIpB,EEJT,EFIc,AJfd,KIemBxB,IAAV,CAAL;AHQmC,AGPnC,AEJJ,ANXA,CCsBJ,KKXU6B,GNXCnF,UIeHsD,IAAI,AJfR,GIeW,CAAP,CEJwB,GAAG,CAACyB,WAAW,GAAGP,cAAf,IAAiC,IAAhE;AAGA,ANbH,CAHM,KMgBCW,sBAAsB,GAAG,IAAIT,SAAjC,EAA4C;ALShDxD,AGPQ,AEAJsD,EAAAA,MLOI,AGPIhB,CHOHrC,OGPD,AEAU,EFAI,CEAD4D,ILOrB,CAAwB,MKPpB,KLOJ,EAAqC1D,OAArC,GAA+C;AAAA,AGNnCsC,AECRyB,EAAAA,IFDQzB,EECF,CLK2C7C,QAAQ,CAAC,CGNrC,CAAC0C,QAAD,CHMoC,AGNjD,CHMmC;AAAA,AGLtC,AECL6B,CLIJ,CKJIA,IAAI;AACJC,EAAAA,UAAU;ALIdpE,AGLQsC,AEEJ,IFFIA,IHKA,CAACrC,GGLO,GAAGyC,QHKnB,CAAwB,EGLM,CAACH,EEjBD,CAoB1B,IFH0B,EHK9B,AGLwC,EHKFpC,EGLR,CAAtB,IHKR,GAAgD;AAAA,AGJ3C,AEGJ,CArBD,EAuBA,MLDsDP,QAAQ,CAAC,YAAD,CAAd;AAAA,AGH/C,CHGD,AGlBO,EAmBP;;AHAAI,AKEAd,MAAM,CAAC8E,CLFC,CAAC/D,cAAT,CAAwB,IKExB,CLFA,AKE6B2D,ELFEzD,EKE/B,GAEA,ELJA,GAAyC;AAAA,SAAMP,QAAQ,CAAC,KAAD,CAAd;AAAA,AKMzC,CLNA,GKMMsE,MAAM,GAAG,SAATA,MAAS,GAAM;AFJd,AEKH,IFLSvB,QAAQ,GAAG,SAAXA,QAAW,CAACtC,SAAD,EAAe;AHDvCL,AGEI,AEKA,MFLM4C,EHFF,CAAC3C,QGEY,GAAGD,GHFxB,CAAwB,IGEQ,CAACO,EHFjC,EAAiCJ,OAAjC,EGEwB,CHFmB,AGEI,KAAvB,CAApB;AHFuC,AGGvCyC,AEKH,CAHD,CFFIA,CEOJ,MLViDhD,IGGlC,CAACM,GHHyC,CAAC,CGGtD,CAAkBM,KHHmC,CAAd,MGGvC,GAAiC2B,YAAY,CAACnD,CAA9C;AHHuC,AGIvC4D,CHJJ,CGIIA,WAAW,CAAC1C,KAAZ,CAAkBO,eAAlB,GAAoC0B,YAAY,CAACpD,CAAjD;AACA6D,EAAAA,WAAW,CAACjC,SAAZ,CAAsBC,GAAtB,CAA0B,MAA1B;AHJJZ,AGKIK,AEMJ,EFNIA,EEME8D,ILXE,AKWE,CLXDlE,EGKI,AEMA,CFNCa,QEMRqD,GLXN,AGKI,CHLoB,AGKEvB,AEMb,GAAM,KLXnB,EAAkCzC,CGK9B,MHLJ,GAA4C;AAAA,AGM3C,AEMGE,CFZG,CEYHA,OLZ8CT,EKYrC,CAACwD,KLZ4C,CAAC,GKYvD,GAAsB,ELZgC,AKYtD,CLZwC;AAAA,AKaxC,CLbJ,EAEA,oBKWc/C,SAAV;AACA,sBAASA,SAAT;AACA,iCAAcA,SAAd;ALXG,AKYN,CALD,EAOA,CLdaD,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAe;AACpC,MAAMC,YAAY,GAAGN,QAAQ,CAACO,aAAT,CAAuB,KAAvB,CAArB;AACAD,EAAAA,YAAY,CAACJ,KAAb,CAAmBM,YAAnB,GAAkCjB,SAAS,CAACP,CAA5C;AACAsB,AKaJ,ELbIA,EKaE8D,ULbU,AKaA,CLbClE,EKaE,GLbf,CAAmBO,KKajB2D,ULbF,AKae,GLbsB7E,AKahB,SLbyB,CAACR,CAA/C;AACAY,AKaA4D,ELbA5D,AKaA4D,MLbM,CAACzD,CKaC,ELbR,CAAW,AKaA,ULbAC,KAAK,EAAI,MKaG,yBAAZ,KAA+B,iCAA1C;ALZI,AKaP,CAFD,EAIA,KLfYA,KAAK,CAAC,CAAD,CAAT,EAAc;AACVO,MAAAA,YAAY,CAACJ,KAAb,CAAmBQ,eAAnB,GAAqCX,KAAK,CAAC,CAAD,CAA1C;AAEH;AACJ,AKaE,GLlBH,CKkBSsE,aAAa,GAAG,SAAhBA,aAAgB,GAAM;ALZ/B/D,AKaAN,ELbAM,AKaAN,QAAQ,CAACC,GLbG,CAACU,SAAb,CAAuBC,AKavB,CAAwB,ELbxB,CAA2B,IKa3B,EAAiCV,CLbjC,IKaA,CAAuCoE,SAAvC,GAAmD,OAAnD;ALZAhE,AKaH,CAFM,CLXHA,YAAY,CAACO,EAAb,GAAkB,OAAlB;AACAR,EAAAA,SAAS,CAACS,WAAV,CAAsBR,YAAtB;AACH,CAbM,EAeP;;;;;AAEO,IAAMS,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAc;AACjC,SAAOC,cAAc,CAAC1B,SAAD,EAAYyB,QAAZ,CAArB;AACH,CAFM;;;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AACpD,SAAOD,SAAS,CAACnC,CAAV,KAAgBoC,SAAS,CAACpC,CAA1B,IAA+BmC,SAAS,CAAClC,CAAV,KAAgBmC,SAAS,CAACnC,CAAhE;AACH,CAFM,EAIP;;;;;AAEO,IAAMoC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO7B,SAAP;AACH,CAFM","file":"game.3f26b179.js","sourceRoot":"..","sourcesContent":["let inputDirection = { x: 0, y: 0 }\r\nlet lastInputDirection = { x: 0, y: 0 }\r\n\r\nwindow.addEventListener(\"keydown\", e => {\r\n    switch (e.key) {\r\n        case \"ArrowUp\":\r\n            if (lastInputDirection.y !== 0) break\r\n            inputDirection = { x: 0, y: -1 }\r\n            break\r\n        case \"ArrowDown\":\r\n            if (lastInputDirection.y !== 0) break\r\n            inputDirection = { x: 0, y: 1 }\r\n            break\r\n        case \"ArrowLeft\":\r\n            if (lastInputDirection.x !== 0) break\r\n            inputDirection = { x: -1, y: 0 }\r\n            break\r\n        case \"ArrowRight\":\r\n            if (lastInputDirection.x !== 0) break\r\n            inputDirection = { x: 1, y: 0 }\r\n            break\r\n    }\r\n})\r\n\r\nexport const getInputDirection = () => {\r\n    lastInputDirection = inputDirection\r\n    return inputDirection\r\n}","import { getInputDirection } from \"./input.js\"\r\n\r\n// a few variables\r\n\r\n// export const snakeSpeed = 50\r\n\r\n\r\n\r\n// initail snake location\r\n\r\nconst snakeBody = { x: 25, y: 25 }\r\n\r\n// updates the snake location\r\n\r\nexport const updateSnake = () => {\r\n    const inputDirection = getInputDirection()\r\n    for (let i = snakeBody.length - 2; i >= 0; i--) {\r\n        snakeBody[i + 1] = { ...snakeBody[i] }\r\n    }\r\n\r\n    snakeBody.x += inputDirection.x\r\n    snakeBody.y += inputDirection.y\r\n}\r\n\r\n// sets the color\r\n\r\nconst colors = [\r\n    [false, \"black\"],\r\n    [false, \"lightgreen\"],\r\n    [false, \"lightblue\"],\r\n    [false, \"red\"],\r\n    [false, \"white\"],\r\n    [false, \"yellow\"]\r\n]\r\n\r\nconst setColor = (input) => {\r\n    colors.map(color => {\r\n        if (input === color[1]) {\r\n            color[0] = true\r\n            document.getElementById(color[1]).style.color = color[1]\r\n        }\r\n        else {\r\n            color[0] = false\r\n            document.getElementById(color[1]).style.color = \"white\"\r\n        }\r\n    })\r\n}\r\n\r\ndocument.getElementById(\"black\").onclick = () => setColor(\"black\")\r\ndocument.getElementById(\"lightblue\").onclick = () => setColor(\"lightblue\")\r\ndocument.getElementById(\"lightgreen\").onclick = () => setColor(\"lightgreen\")\r\ndocument.getElementById(\"red\").onclick = () => setColor(\"red\")\r\ndocument.getElementById(\"white\").onclick = () => setColor(\"white\")\r\ndocument.getElementById(\"yellow\").onclick = () => setColor(\"yellow\")\r\n\r\n// draws the initial snake location\r\n\r\nexport const drawSnake = (gameBoard) => {\r\n    const snakeElement = document.createElement(\"div\")\r\n    snakeElement.style.gridRowStart = snakeBody.y\r\n    snakeElement.style.gridColumnStart = snakeBody.x\r\n    colors.map(color => {\r\n        if (color[0]) {\r\n            snakeElement.style.backgroundColor = color[1]\r\n\r\n        }\r\n    })\r\n    snakeElement.classList.add(\"snake\")\r\n    snakeElement.id = \"snake\"\r\n    gameBoard.appendChild(snakeElement)\r\n}\r\n\r\n// checks if the square is on anything\r\n\r\nexport const onSnake = (position) => {\r\n    return equalPositions(snakeBody, position)\r\n}\r\n\r\nexport const equalPositions = (position1, position2) => {\r\n    return position1.x === position2.x && position1.y === position2.y\r\n}\r\n\r\n// simply returns the head of the snake\r\n\r\nexport const getSnakeHead = () => {\r\n    return snakeBody\r\n}","import { onSnake } from \"./cube.js\"\r\n\r\n// these are the obsticale positions\r\n\r\nexport let obsticalePositions = [\r\n    { x: 10, y: 25 },\r\n    { x: 25, y: 45 },\r\n    { x: 40, y: 25 },\r\n    { x: 40, y: 45 },\r\n    { x: 10, y: 45 },\r\n]\r\n\r\n// checks if the square is on the obsticale\r\n\r\nexport const checkObsticale = () => {\r\n    let isOnObsticale = false\r\n\r\n    obsticalePositions.map(obsticalePosition => {\r\n        if (onSnake(obsticalePosition)) return isOnObsticale = true\r\n\r\n        return false\r\n    })\r\n\r\n    return isOnObsticale\r\n}\r\n\r\n// this draws the obsticale\r\n\r\nexport const drawObsticale = (gameBoard) => {\r\n    obsticalePositions.map(position => {\r\n        const obsticaleElement = document.createElement(\"div\")\r\n        obsticaleElement.style.gridRowStart = position.y\r\n        obsticaleElement.style.gridColumnStart = position.x\r\n        obsticaleElement.classList.add(\"obsticale\")\r\n        gameBoard.appendChild(obsticaleElement)\r\n    })\r\n}","const GRID_SIZE = 50\r\n\r\n// generates a random grid position\r\n\r\nexport const randomGridPosition = () => {\r\n    return {\r\n        x: Math.floor(Math.random() * GRID_SIZE) + 1,\r\n        y: Math.floor(Math.random() * GRID_SIZE) + 1\r\n    }\r\n}\r\n\r\n// scans to see if you are outside the grid\r\n\r\nexport const outSideGrid = (position) => {\r\n    return (\r\n        position.x < 1 || position.x > GRID_SIZE ||\r\n        position.y < 1 || position.y > GRID_SIZE\r\n    )\r\n}","import { onSnake } from \"./cube.js\"\r\nimport { obsticalePositions } from \"./obsticales.js\"\r\nimport { randomGridPosition } from \"./grid.js\"\r\n\r\n// this sets the original food position as well as the new one\r\n\r\nlet newFoodPosition = { x: 25, y: 10 }\r\n\r\nconst getRandomFoodPosition = () => {\r\n    while (onSnake(newFoodPosition)) {\r\n        newFoodPosition = randomGridPosition()\r\n    }\r\n    return newFoodPosition\r\n}\r\n\r\n// these are some variables\r\n\r\nlet foodPosition = getRandomFoodPosition()\r\nexport let time = 0\r\nexport let score = 0\r\nlet interval = null\r\n\r\n// this is the timer\r\n\r\n\r\nexport const myTimer = () => {\r\n    time = time + 1\r\n    return\r\n}\r\n\r\n// this function moves the food and obsticale locations after the snake eats the food\r\n\r\nexport const updateFood = () => {\r\n    if (onSnake(foodPosition)) {\r\n        foodPosition = getRandomFoodPosition()\r\n        obsticalePositions[0] = randomGridPosition()\r\n        obsticalePositions[1] = randomGridPosition()\r\n        obsticalePositions[2] = randomGridPosition()\r\n        obsticalePositions[3] = randomGridPosition()\r\n        obsticalePositions[4] = randomGridPosition()\r\n        score += (10 - time)\r\n        time = 0\r\n        if (interval) {\r\n            clearInterval(interval)\r\n        }\r\n        interval = setInterval(myTimer, 1000)\r\n    }\r\n}\r\n\r\n\r\n\r\n// this creates the food\r\n\r\nexport const drawFood = (gameBoard) => {\r\n    const foodElement = document.createElement(\"div\")\r\n    foodElement.style.gridRowStart = foodPosition.y\r\n    foodElement.style.gridColumnStart = foodPosition.x\r\n    foodElement.classList.add(\"food\")\r\n    gameBoard.appendChild(foodElement)\r\n}\r\n\r\n\r\n\r\n","import { score } from \"./food.js\"\r\n\r\nconst scoreBoard = document.getElementById(\"score\")\r\nconst highScoreBoard = document.getElementById(\"high-score\")\r\n\r\nconst highScore = localStorage.getItem(\"high-score\")\r\n\r\nif (!highScore) {\r\n    localStorage.setItem(\"high-score\", 0)\r\n}\r\n\r\nexport const displayScore = () => {\r\n    scoreBoard.innerHTML = score.toString()\r\n    highScoreBoard.innerHTML = highScore.toString()\r\n\r\n    if (score > highScore) {\r\n        localStorage.setItem(\"high-score\", score)\r\n    }\r\n}","import { updateSnake, drawSnake, getSnakeHead } from \"./cube.js\"\r\nimport { updateFood, drawFood, score } from \"./food.js\"\r\nimport { drawObsticale, checkObsticale } from \"./obsticales.js\"\r\nimport { outSideGrid } from \"./grid.js\"\r\nimport { displayScore } from \"./score.js\"\r\n\r\nlet lastRenderTime = 0\r\nlet gameOver = false\r\nconst gameBoard = document.getElementById(\"game-board\")\r\nlet gameSpeed = 50\r\n\r\n// this sets the difficulty\r\n\r\nconst setSpeed = (speed, difficulty) => {\r\n    gameSpeed = speed\r\n    document.getElementById(difficulty[1]).style.color = \"white\"\r\n    document.getElementById(difficulty[2]).style.color = \"white\"\r\n    document.getElementById(difficulty[0]).style.color = \"red\"\r\n}\r\n\r\ndocument.getElementById(\"easy\").onclick = () => setSpeed(25, [\"easy\", \"normal\", \"hard\"])\r\ndocument.getElementById(\"normal\").onclick = () => setSpeed(50, [\"normal\", \"easy\", \"hard\"])\r\ndocument.getElementById(\"hard\").onclick = () => setSpeed(75, [\"hard\", \"easy\", \"normal\"])\r\n\r\n\r\n// game loop\r\n\r\n\r\nconst main = (currentTime) => {\r\n    if (gameOver) {\r\n        if (confirm(`Game Over. Your final score is ${score} points. Press Enter to restart the game.`)) {\r\n            window.location = \"/\"\r\n        }\r\n        return\r\n    }\r\n\r\n    window.requestAnimationFrame(main)\r\n    const secondsSinceLastRender = (currentTime - lastRenderTime) / 1000\r\n\r\n\r\n    if (secondsSinceLastRender < 1 / gameSpeed) return\r\n\r\n    lastRenderTime = currentTime\r\n\r\n    update()\r\n    draw()\r\n    checkDeath()\r\n    displayScore()\r\n    // displayHighScore()\r\n}\r\n\r\n// initial run of the game loop\r\n\r\nwindow.requestAnimationFrame(main)\r\n\r\n// updates everything\r\n\r\nconst update = () => {\r\n    updateSnake()\r\n    updateFood()\r\n}\r\n\r\n// draws everything\r\n\r\nconst draw = () => {\r\n    gameBoard.innerHTML = ''\r\n    drawSnake(gameBoard)\r\n    drawFood(gameBoard)\r\n    drawObsticale(gameBoard)\r\n}\r\n\r\n// checks for game over\r\n\r\nconst checkDeath = () => {\r\n    gameOver = outSideGrid(getSnakeHead()) || checkObsticale()\r\n}\r\n\r\n// testing custimazation\r\n\r\nexport const changeBoxGlow = () => {\r\n    document.getElementById(\"snake\").style.boxShadow = \"black\"\r\n}"]}