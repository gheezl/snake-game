{"version":3,"sources":["javascript/input.js","javascript/cube.js","javascript/obsticales.js","javascript/grid.js","javascript/food.js","javascript/score.js","javascript/game.js"],"names":["inputDirection","x","y","lastInputDirection","window","addEventListener","e","key","getInputDirection","snakeBody","updateSnake","i","length","colors","setColor","input","map","color","document","getElementById","style","onclick","drawSnake","gameBoard","snakeElement","createElement","gridRowStart","gridColumnStart","backgroundColor","classList","add","id","appendChild","onSnake","position","equalPositions","position1","position2","getSnakeHead","obsticalePositions","checkObsticale","isOnObsticale","obsticalePosition","drawObsticale","obsticaleElement","GRID_SIZE","randomGridPosition","Math","floor","random","outSideGrid","newFoodPosition","getRandomFoodPosition","foodPosition","time","score","interval","myTimer","updateFood","clearInterval","setInterval","drawFood","foodElement","scoreBoard","highScoreBoard","highScore","localStorage","getItem","setItem","displayScore","innerHTML","toString","lastRenderTime","gameOver","gameSpeed","setSpeed","speed","difficulty","main","currentTime","confirm","location","requestAnimationFrame","update","draw","checkDeath","changeBoxGlow","boxShadow"],"mappings":"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","file":"game.1401d57b.js","sourceRoot":"..","sourcesContent":["let inputDirection = { x: 0, y: 0 }\r\nlet lastInputDirection = { x: 0, y: 0 }\r\n\r\nwindow.addEventListener(\"keydown\", e => {\r\n    switch (e.key) {\r\n        case \"ArrowUp\":\r\n            if (lastInputDirection.y !== 0) break\r\n            inputDirection = { x: 0, y: -1 }\r\n            break\r\n        case \"ArrowDown\":\r\n            if (lastInputDirection.y !== 0) break\r\n            inputDirection = { x: 0, y: 1 }\r\n            break\r\n        case \"ArrowLeft\":\r\n            if (lastInputDirection.x !== 0) break\r\n            inputDirection = { x: -1, y: 0 }\r\n            break\r\n        case \"ArrowRight\":\r\n            if (lastInputDirection.x !== 0) break\r\n            inputDirection = { x: 1, y: 0 }\r\n            break\r\n    }\r\n})\r\n\r\nexport const getInputDirection = () => {\r\n    lastInputDirection = inputDirection\r\n    return inputDirection\r\n}","import { getInputDirection } from \"./input.js\"\r\n\r\n// a few variables\r\n\r\n// export const snakeSpeed = 50\r\n\r\n\r\n\r\n// initail snake location\r\n\r\nconst snakeBody = { x: 25, y: 25 }\r\n\r\n// updates the snake location\r\n\r\nexport const updateSnake = () => {\r\n    const inputDirection = getInputDirection()\r\n    for (let i = snakeBody.length - 2; i >= 0; i--) {\r\n        snakeBody[i + 1] = { ...snakeBody[i] }\r\n    }\r\n\r\n    snakeBody.x += inputDirection.x\r\n    snakeBody.y += inputDirection.y\r\n}\r\n\r\n// sets the color\r\n\r\nconst colors = [\r\n    [false, \"black\"],\r\n    [false, \"lightgreen\"],\r\n    [false, \"lightblue\"],\r\n    [false, \"red\"],\r\n    [false, \"white\"],\r\n    [false, \"yellow\"]\r\n]\r\n\r\nconst setColor = (input) => {\r\n    colors.map(color => {\r\n        if (input === color[1]) {\r\n            color[0] = true\r\n            document.getElementById(color[1]).style.color = color[1]\r\n        }\r\n        else {\r\n            color[0] = false\r\n            document.getElementById(color[1]).style.color = \"white\"\r\n        }\r\n    })\r\n}\r\n\r\ndocument.getElementById(\"black\").onclick = () => setColor(\"black\")\r\ndocument.getElementById(\"lightblue\").onclick = () => setColor(\"lightblue\")\r\ndocument.getElementById(\"lightgreen\").onclick = () => setColor(\"lightgreen\")\r\ndocument.getElementById(\"red\").onclick = () => setColor(\"red\")\r\ndocument.getElementById(\"white\").onclick = () => setColor(\"white\")\r\ndocument.getElementById(\"yellow\").onclick = () => setColor(\"yellow\")\r\n\r\n// draws the initial snake location\r\n\r\nexport const drawSnake = (gameBoard) => {\r\n    const snakeElement = document.createElement(\"div\")\r\n    snakeElement.style.gridRowStart = snakeBody.y\r\n    snakeElement.style.gridColumnStart = snakeBody.x\r\n    colors.map(color => {\r\n        if (color[0]) {\r\n            snakeElement.style.backgroundColor = color[1]\r\n\r\n        }\r\n    })\r\n    snakeElement.classList.add(\"snake\")\r\n    snakeElement.id = \"snake\"\r\n    gameBoard.appendChild(snakeElement)\r\n}\r\n\r\n// checks if the square is on anything\r\n\r\nexport const onSnake = (position) => {\r\n    return equalPositions(snakeBody, position)\r\n}\r\n\r\nexport const equalPositions = (position1, position2) => {\r\n    return position1.x === position2.x && position1.y === position2.y\r\n}\r\n\r\n// simply returns the head of the snake\r\n\r\nexport const getSnakeHead = () => {\r\n    return snakeBody\r\n}","import { onSnake } from \"./cube.js\"\r\n\r\n// these are the obsticale positions\r\n\r\nexport let obsticalePositions = [\r\n    { x: 10, y: 25 },\r\n    { x: 25, y: 45 },\r\n    { x: 40, y: 25 },\r\n    { x: 40, y: 45 },\r\n    { x: 10, y: 45 },\r\n]\r\n\r\n// checks if the square is on the obsticale\r\n\r\nexport const checkObsticale = () => {\r\n    let isOnObsticale = false\r\n\r\n    obsticalePositions.map(obsticalePosition => {\r\n        if (onSnake(obsticalePosition)) return isOnObsticale = true\r\n\r\n        return false\r\n    })\r\n\r\n    return isOnObsticale\r\n}\r\n\r\n// this draws the obsticale\r\n\r\nexport const drawObsticale = (gameBoard) => {\r\n    obsticalePositions.map(position => {\r\n        const obsticaleElement = document.createElement(\"div\")\r\n        obsticaleElement.style.gridRowStart = position.y\r\n        obsticaleElement.style.gridColumnStart = position.x\r\n        obsticaleElement.classList.add(\"obsticale\")\r\n        gameBoard.appendChild(obsticaleElement)\r\n    })\r\n}","const GRID_SIZE = 50\r\n\r\n// generates a random grid position\r\n\r\nexport const randomGridPosition = () => {\r\n    return {\r\n        x: Math.floor(Math.random() * GRID_SIZE) + 1,\r\n        y: Math.floor(Math.random() * GRID_SIZE) + 1\r\n    }\r\n}\r\n\r\n// scans to see if you are outside the grid\r\n\r\nexport const outSideGrid = (position) => {\r\n    return (\r\n        position.x < 1 || position.x > GRID_SIZE ||\r\n        position.y < 1 || position.y > GRID_SIZE\r\n    )\r\n}","import { onSnake } from \"./cube.js\"\r\nimport { obsticalePositions } from \"./obsticales.js\"\r\nimport { randomGridPosition } from \"./grid.js\"\r\n\r\n// this sets the original food position as well as the new one\r\n\r\nlet newFoodPosition = { x: 25, y: 10 }\r\n\r\nconst getRandomFoodPosition = () => {\r\n    while (onSnake(newFoodPosition)) {\r\n        newFoodPosition = randomGridPosition()\r\n    }\r\n    return newFoodPosition\r\n}\r\n\r\n// these are some variables\r\n\r\nlet foodPosition = getRandomFoodPosition()\r\nexport let time = 0\r\nexport let score = 0\r\nlet interval = null\r\n\r\n// this is the timer\r\n\r\n\r\nexport const myTimer = () => {\r\n    time = time + 1\r\n    return\r\n}\r\n\r\n// this function moves the food and obsticale locations after the snake eats the food\r\n\r\nexport const updateFood = () => {\r\n    if (onSnake(foodPosition)) {\r\n        foodPosition = getRandomFoodPosition()\r\n        obsticalePositions[0] = randomGridPosition()\r\n        obsticalePositions[1] = randomGridPosition()\r\n        obsticalePositions[2] = randomGridPosition()\r\n        obsticalePositions[3] = randomGridPosition()\r\n        obsticalePositions[4] = randomGridPosition()\r\n        score += (10 - time)\r\n        time = 0\r\n        if (interval) {\r\n            clearInterval(interval)\r\n        }\r\n        interval = setInterval(myTimer, 1000)\r\n    }\r\n}\r\n\r\n\r\n\r\n// this creates the food\r\n\r\nexport const drawFood = (gameBoard) => {\r\n    const foodElement = document.createElement(\"div\")\r\n    foodElement.style.gridRowStart = foodPosition.y\r\n    foodElement.style.gridColumnStart = foodPosition.x\r\n    foodElement.classList.add(\"food\")\r\n    gameBoard.appendChild(foodElement)\r\n}\r\n\r\n\r\n\r\n","import { score } from \"./food.js\"\r\n\r\nconst scoreBoard = document.getElementById(\"score\")\r\nconst highScoreBoard = document.getElementById(\"high-score\")\r\n\r\nconst highScore = localStorage.getItem(\"high-score\")\r\n\r\nif (!highScore) {\r\n    localStorage.setItem(\"high-score\", 0)\r\n}\r\n\r\nexport const displayScore = () => {\r\n    scoreBoard.innerHTML = score.toString()\r\n    highScoreBoard.innerHTML = highScore.toString()\r\n\r\n    if (score > highScore) {\r\n        localStorage.setItem(\"high-score\", score)\r\n    }\r\n}","import { updateSnake, drawSnake, getSnakeHead } from \"./cube.js\"\r\nimport { updateFood, drawFood, score } from \"./food.js\"\r\nimport { drawObsticale, checkObsticale } from \"./obsticales.js\"\r\nimport { outSideGrid } from \"./grid.js\"\r\nimport { displayScore } from \"./score.js\"\r\n\r\nlet lastRenderTime = 0\r\nlet gameOver = false\r\nconst gameBoard = document.getElementById(\"game-board\")\r\nlet gameSpeed = 50\r\n\r\n// this sets the difficulty\r\n\r\nconst setSpeed = (speed, difficulty) => {\r\n    gameSpeed = speed\r\n    document.getElementById(difficulty[1]).style.color = \"white\"\r\n    document.getElementById(difficulty[2]).style.color = \"white\"\r\n    document.getElementById(difficulty[0]).style.color = \"red\"\r\n}\r\n\r\ndocument.getElementById(\"easy\").onclick = () => setSpeed(25, [\"easy\", \"normal\", \"hard\"])\r\ndocument.getElementById(\"normal\").onclick = () => setSpeed(50, [\"normal\", \"easy\", \"hard\"])\r\ndocument.getElementById(\"hard\").onclick = () => setSpeed(75, [\"hard\", \"easy\", \"normal\"])\r\n\r\n\r\n// game loop\r\n\r\n\r\nconst main = (currentTime) => {\r\n    if (gameOver) {\r\n        if (confirm(`Game Over. Your final score is ${score} points. Press Enter to restart the game.`)) {\r\n            window.location = \"/\"\r\n        }\r\n        return\r\n    }\r\n\r\n    window.requestAnimationFrame(main)\r\n    const secondsSinceLastRender = (currentTime - lastRenderTime) / 1000\r\n\r\n\r\n    if (secondsSinceLastRender < 1 / gameSpeed) return\r\n\r\n    lastRenderTime = currentTime\r\n\r\n    update()\r\n    draw()\r\n    checkDeath()\r\n    displayScore()\r\n    // displayHighScore()\r\n}\r\n\r\n// initial run of the game loop\r\n\r\nwindow.requestAnimationFrame(main)\r\n\r\n// updates everything\r\n\r\nconst update = () => {\r\n    updateSnake()\r\n    updateFood()\r\n}\r\n\r\n// draws everything\r\n\r\nconst draw = () => {\r\n    gameBoard.innerHTML = ''\r\n    drawSnake(gameBoard)\r\n    drawFood(gameBoard)\r\n    drawObsticale(gameBoard)\r\n}\r\n\r\n// checks for game over\r\n\r\nconst checkDeath = () => {\r\n    gameOver = outSideGrid(getSnakeHead()) || checkObsticale()\r\n}\r\n\r\n// testing custimazation\r\n\r\nexport const changeBoxGlow = () => {\r\n    document.getElementById(\"snake\").style.boxShadow = \"black\"\r\n}"]}